How did viewing a diff between two versions of a 
file help you see the bug that was introduced?

I can think of the following reasons:
1. Veiwing a diff helps me to focus only on the 
information that matters. 
2. If the code was working fine before it was
changed, then the bug must be hidden in the
part that is changed.

How could having easy access to the entire history 
of a file make you a more efficient programmer in 
the long term?

It makes it easier to try new programming ideas.
For example, you can easily try a different 
implementation and see if it works or not and if
not, you can revert back to the old version.

What do you think are the pros and cons of manually 
choosing when to create a commit, like you do in Git, 
vs having versions automatically saved, like Google 
docs does?

pros: each commit contains a more logical change 
cons: You might forget to commit

Why do you think some version control systems, like 
Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file 
separately?

In case of version control of code it is important
 that each version can be built, so inegrity of files
in each version is important.


How can you use the commands git log and git diff 
to view the history of files?

git log: shows the commits, their message and ids
git diff id_first id_second: shows the difference 
between two commits, it shows what is added or removed
n the second  commit wrt the first one


How might using version control make you more confident 
to make changes that could break something?

If I know that reverting back is so easy, I will try
out many things.

Now that you have your workspace set up, what do you 
want to try using Git for?

I want to use Git for c programming.
